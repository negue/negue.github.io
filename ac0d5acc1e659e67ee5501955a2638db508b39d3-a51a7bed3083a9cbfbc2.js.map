{"version":3,"sources":["webpack:///./src/components/tags/TechTag.tsx","webpack:///./src/components/tags/TechTagsList.tsx","webpack:///./src/components/tags/TechTagsOverview.tsx"],"names":["TechTagButton","styled","button","TechTag","props","tag","tech","svg","size","color","buttonStyle","count","hoverTextColor","className","to","style","fontSize","role","viewBox","xmlns","width","height","d","ListHolder","div","TechTagsList","labels","site","siteMetadata","tags","labelsMap","label","map","t","filter","key","labelCount","TechTagsOverview","posts","allMarkdownRemark","edges","Set","forEach","post","node","frontmatter","add","Array","from","values","title"],"mappings":"4QAKMA,EAAgBC,IAAOC,OAAV,6EAAGD,CAAH,miBA0FJE,EA3CC,SAACC,GAAU,IACjBC,EAAiED,EAAjEC,IAAKC,EAA4DF,EAA5DE,KAAMC,EAAsDH,EAAtDG,IAAKC,EAAiDJ,EAAjDI,KADC,EACgDJ,EAA3CK,aADL,MACa,QADb,EAInBC,GAHmEN,EAA1BO,MAA0BP,EAAnBQ,eAIpD,CACE,qBAAsB,OACtB,cAAeH,EACf,oBAAqBA,EACrB,uBAAwBA,EACxB,gBAAiBA,IAGrB,OACE,yBAAKI,UAAU,sBACb,kBAAC,OAAD,CAAMC,GAAE,SAAWT,EAAX,KACN,kBAACL,EAAD,CACEa,UAAU,aACVE,MAAOL,GAEP,uBAAGG,UAAU,YAAYP,EAAzB,KACA,0BAAMO,UAAU,WAAWE,MAAO,CAAEC,SAAUR,EAAMC,MAAOA,IACzD,yBAAKQ,KAAK,MAAMC,QAAQ,YAAYC,MAAM,6BACrCC,MAAOZ,EAAMa,OAAQb,EAAMK,UAAWN,EAAM,GAAK,SAEpD,+BAAQD,GACR,0BACEgB,EAAGf,SAMX,I,+wBC/ER,IAsBMgB,EAAatB,IAAOuB,IAAV,+EAAGvB,CAAH,yEAUHwB,EAAe,SAACrB,GAM3B,IALA,IAKA,EALMsB,EAAS,OAAoCC,KAAKC,aAAaF,OAC/DG,EAAOzB,EAAMyB,MAAQ,GAErBC,EAAuD,GAE7D,IAAoBJ,KAApB,aAA4B,KAAjBK,EAAiB,QAC1BD,EAAUC,EAAM1B,KAAO0B,EAGzB,OACE,kBAACR,EAAD,KAEIM,EACGG,KAAI,SAAAC,GAAC,OAAIH,EAAUG,IAAM,CACxB5B,IAAK4B,EACL3B,KAAM2B,MAEPC,QAAO,SAAAD,GAAC,QAAMA,KACdD,KAAI,SAACD,GAAD,OACH,kBAAC,EAAD,CAASI,IAAKJ,EAAM1B,IAClBA,IAAK0B,EAAM1B,IACXC,KAAMyB,EAAMzB,KACZC,IAAKwB,EAAMxB,IACXC,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbG,eAAgBmB,EAAMnB,eACtBD,MAAOP,EAAMgC,YAAchC,EAAMgC,WAAWL,EAAM1B,a,ig3BC5DnDgC,EAAmB,SAACjC,GAC/B,IA6BMkC,EA7BO,OA6BMC,kBAAkBC,MAI/Bd,EAAS,IAAIe,IACnBH,EAAMI,SAAQ,SAAAC,GACZA,EAAKC,KAAKC,YAAYhB,KAAKG,KAAI,SAAAC,GAAC,OAAIP,EAAOoB,IAAIb,SAGjD,IAAMJ,EAAOkB,MAAMC,KAAKtB,EAAOuB,UAE/B,OACE,oCACG7C,EAAM8C,OAAS,4BAAK9C,EAAM8C,OAC3B,yBAAKrC,UAAU,WACb,kBAAC,IAAD,CAAcgB,KAAMA,EAAMO,WAbiB","file":"ac0d5acc1e659e67ee5501955a2638db508b39d3-a51a7bed3083a9cbfbc2.js","sourcesContent":["import React from \"react\"\n\nimport {Link} from \"gatsby\"\nimport styled from \"styled-components\"\n\nconst TechTagButton = styled.button`\n  transition: filter 0.7s ease-out;\n  transform: translate3d(0, 0, 0);\n  background: #777;\n  border: 0;\n  font-size: .85rem;\n  display: flex;\n  padding: 8px;\n  align-items: center;\n  cursor: pointer;\n\n  p {\n    transition-duration: 0;\n    color: white;\n    margin: 0;\n  }\n\n  span {\n    height: 20px;\n  }\n\n  :hover, :active, :focus {\n    outline: 0;\n    background: var(--hover-background, #222);\n\n    filter: drop-shadow(0 0 0.5rem var(--svg-hover-color));\n\n    p {\n      color: var(--hover-color);\n    }\n\n    svg {\n      --svg-color: var(--svg-hover-color);\n      filter: drop-shadow(0 0 0.75rem var(--svg-hover-color));\n    }\n  }\n\n  svg {\n    fill: var(--svg-color);\n    margin-left: 8px;\n    \n    &.empty {\n      display: none;\n    }\n  }\n`;\n\nconst TechTag = (props) => {\n  const { tag, tech, svg, size, color = 'white', count, hoverTextColor } = props\n\n  // Change colors on hover :>\n  const buttonStyle = \n    {\n      '--hover-background': '#333',\n      '--svg-color': color,\n      '--svg-hover-color': color,\n      '--hover-border-color': color,\n      '--hover-color': color,\n    } as React.CSSProperties;\n\n  return (\n    <div className=\"d-inline-block p-1\">\n      <Link to={`/tags/${tag}/`}>\n        <TechTagButton\n          className=\"text-white\"\n          style={buttonStyle}\n        >\n          <p className=\"d-inline\">{tech} </p> \n          <span className=\"d-inline\" style={{ fontSize: size, color: color }}>\n            <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" \n                 width={size} height={size} className={svg ? '' : 'empty'}\n            >\n              <title>{tech}</title>\n              <path \n                d={svg} />\n            </svg>\n          </span>\n\n        </TechTagButton>\n      </Link>\n      {(false && count > 0) &&\n        <span> x\n              {count}\n        </span>\n      }\n    </div>\n\n  )\n}\n\nexport default TechTag\n","import TechTag from \"./TechTag\"\nimport React from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\nimport {SiteSiteMetadataLabels, TagListQuery} from \"../../graphql\"\nimport styled from \"styled-components\"\n\nconst query = graphql`\n  query TagList {\n    site {\n      siteMetadata {\n        labels {\n          tag\n          tech\n          svg\n          size\n          color\n          hoverTextColor\n        }\n      }\n    }\n  }\n`\n\ninterface TechTagsListProps {\n  tags: string[];\n  labelCount?: {[key: string]: number} \n}\n\nconst ListHolder = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  > div {\n    margin-right: 8px;\n    margin-top: 8px;\n  }\n`;\n\nexport const TechTagsList = (props: TechTagsListProps) => {\n  const labels = useStaticQuery<TagListQuery>(query).site.siteMetadata.labels;\n  const tags = props.tags || [];\n\n  const labelsMap: { [key: string]: SiteSiteMetadataLabels } = {};\n\n  for (const label of labels) {\n    labelsMap[label.tag] = label;\n  }\n\n  return (\n    <ListHolder>\n      {\n        tags\n          .map(t => labelsMap[t] || {\n            tag: t,\n            tech: t,\n          })\n          .filter(t => !!t)\n          .map((label) =>\n            <TechTag key={label.tag} \n              tag={label.tag}\n              tech={label.tech}\n              svg={label.svg}\n              size={label.size} \n              color={label.color}\n              hoverTextColor={label.hoverTextColor}\n              count={props.labelCount && props.labelCount[label.tag]} />\n          )\n      }\n    </ListHolder>\n  )\n}\n","import React from \"react\"\n\nimport {TechTagsList} from \"./TechTagsList\"\nimport {graphql, useStaticQuery} from \"gatsby\"\n\nexport const TechTagsOverview = (props: any) => {\n  const data = useStaticQuery(graphql`\n      query TechTagsOverview {\n        site {\n          siteMetadata {\n            labels {\n              tag\n              tech\n              svg\n              size\n              color\n            }\n          }\n        }\n        allMarkdownRemark(\n          sort: { fields: [frontmatter___date], order: DESC }\n          filter: { frontmatter: { published: { eq: true } } }\n        ) {\n          edges {\n            node {\n              frontmatter {\n                tags\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const posts = data.allMarkdownRemark.edges;\n\n  const labelCountMap: { [key: string]: number } = {};\n\n  const labels = new Set();\n  posts.forEach(post => {\n    post.node.frontmatter.tags.map(t => labels.add(t));\n  });\n\n  const tags = Array.from(labels.values());\n\n  return (\n    <>\n      {props.title && <h4>{props.title}</h4> }\n      <div className=\"d-block\">\n        <TechTagsList tags={tags} labelCount={labelCountMap}/>\n      </div>\n    </>\n  )\n}\n"],"sourceRoot":""}